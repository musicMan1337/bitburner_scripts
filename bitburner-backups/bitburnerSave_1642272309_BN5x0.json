{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":2744,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":2,\"intelligence\":18,\"hacking_chance_mult\":2.2112963413723583,\"hacking_speed_mult\":2.1632482270822715,\"hacking_money_mult\":7.174033107653632,\"hacking_grow_mult\":3.3527758285043125,\"hacking_exp\":1328187982.4200897,\"strength_exp\":1.977639612123023,\"defense_exp\":1.977639612123023,\"dexterity_exp\":1.977639612123023,\"agility_exp\":1.977639612123023,\"charisma_exp\":1.977639612123023,\"intelligence_exp\":378.71999999999997,\"hacking_mult\":5.812576934316629,\"strength_mult\":1.762602149842267,\"defense_mult\":1.5326975216019714,\"dexterity_mult\":2.4429665796813818,\"agility_mult\":1.60933239768207,\"charisma_mult\":1.8392370259223656,\"hacking_exp_mult\":6.122313231887201,\"strength_exp_mult\":1.938862364826493,\"defense_exp_mult\":1.938862364826493,\"dexterity_exp_mult\":1.938862364826493,\"agility_exp_mult\":1.938862364826493,\"charisma_exp_mult\":1.938862364826493,\"company_rep_mult\":1.5326975216019714,\"faction_rep_mult\":1.5326975216019714,\"money\":65235597654129.29,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-4096gb-0\",\"pserv-4096gb-1\",\"pserv-4096gb-2\",\"pserv-4096gb-3\",\"pserv-4096gb-4\",\"pserv-4096gb-5\",\"pserv-4096gb-6\",\"pserv-4096gb-7\",\"pserv-4096gb-8\",\"pserv-4096gb-9\",\"pserv-4096gb-10\",\"pserv-4096gb-11\",\"pserv-4096gb-12\",\"pserv-4096gb-13\",\"pserv-4096gb-14\",\"pserv-4096gb-15\",\"pserv-4096gb-16\",\"pserv-4096gb-17\",\"pserv-4096gb-18\",\"pserv-4096gb-19\",\"pserv-4096gb-20\",\"pserv-4096gb-21\",\"pserv-4096gb-22\",\"pserv-4096gb-23\",\"pserv-4096gb-24\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"NiteSec\",\"Sector-12\",\"The Black Hand\",\"BitRunners\",\"Daedalus\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":35,\"name\":\"NeuroFlux Governor\"},{\"level\":36,\"name\":\"NeuroFlux Governor\"},{\"level\":37,\"name\":\"NeuroFlux Governor\"},{\"level\":38,\"name\":\"NeuroFlux Governor\"},{\"level\":39,\"name\":\"NeuroFlux Governor\"},{\"level\":40,\"name\":\"NeuroFlux Governor\"},{\"level\":41,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":28,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.5326975216019714,\"crime_success_mult\":1.5326975216019714,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.5326975216019714,\"hacknet_node_money_mult\":1.8545640011383857,\"hacknet_node_purchase_cost_mult\":0.5705677811259461,\"hacknet_node_ram_cost_mult\":0.6339642012510512,\"hacknet_node_core_cost_mult\":0.6339642012510512,\"hacknet_node_level_cost_mult\":0.5388695710633935,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":5,\"lastUpdate\":1642272308603,\"totalPlaytime\":2736400400,\"playtimeSinceLastAug\":268186600,\"playtimeSinceLastBitnode\":1287771400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":7251736227470.227,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":162390699654408.03,\"total\":65235596654129.29,\"work\":0,\"servers\":-23824171008.00001,\"other\":-306700000,\"augmentations\":-104382708356740.94}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2496960,\"codingcontract\":0,\"corporation\":0,\"crime\":95700,\"gang\":0,\"hacking\":8360480354100.864,\"hacknet\":20379192636.513477,\"hacknet_expenses\":-11740221606.302114,\"hospitalization\":-12951000,\"infiltration\":0,\"sleeves\":0,\"stock\":2963816929836201,\"total\":491314851822197.2,\"work\":2573281.3600000422,\"servers\":-666942193522091,\"other\":-16206800000,\"augmentations\":-1813912784228135.5}},\"scriptProdSinceLastAug\":169551982403543.97,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":7,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"95.5.4.6\",\"isConnectedTo\":true,\"maxRam\":2097152,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"DeepscanV1.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmoneyThreshOverride = 4;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\"}],\"ramUsage\":2.65,\"server\":\"home\",\"_hash\":\"66564122da72e063078801a9be4d4953671743756497c8cd5154d628cbf8aab5\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let pserv = false;\\n    let targetLimit = 0;\\n    if (ns.args.length) {\\n        [pserv, targetLimit] = ns.args;\\n    }\\n\\n    let purchased = ns.getPurchasedServers();\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    async function __scanAndWriteAllNodes__() {\\n        let nodes = [];\\n        let newNodes = ['home'];\\n        let newNodes2 = [];\\n        let repeat = true;\\n\\n        while (repeat) {\\n            newNodes2 = [];\\n            repeat = false;\\n\\n            let i, j;\\n            for (i = 0; i < newNodes.length; i++) {\\n                let connected = ns.scan(newNodes[i]);\\n\\n                for (j = 0; j < connected.length; j++) {\\n                    let node = connected[j];\\n                    if (!nodes.includes(node) && !newNodes.includes(node) && !newNodes2.includes(node)) {\\n                        newNodes2.push(node);\\n                        repeat = true;\\n                    }\\n                }\\n            }\\n\\n            nodes = nodes.concat(newNodes);\\n            newNodes = newNodes2;\\n        }\\n\\n        nodes = nodes.concat(purchased);\\n        await ns.write('nodes.txt', nodes, 'w');\\n    }\\n\\n    function __nukeAvailableNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let myHackLevel = ns.getHackingLevel();\\n\\n        let Programs = [\\n            ns.fileExists('BruteSSH.exe'),\\n            ns.fileExists('FTPCrack.exe'),\\n            ns.fileExists('relaySMTP.exe'),\\n            ns.fileExists('HTTPWorm.exe'),\\n            ns.fileExists('SQLInject.exe')\\n        ];\\n\\n        let availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n        nodes.forEach((node) => {\\n            if (\\n                !ns.hasRootAccess(node) &&\\n                ns.getServerNumPortsRequired(node) <= availPrograms &&\\n                ns.getServerRequiredHackingLevel(node) <= myHackLevel\\n            ) {\\n                Programs.forEach((exists, i) => {\\n                    if (exists) {\\n                        switch (i) {\\n                            case 0:\\n                                ns.brutessh(node);\\n                                break;\\n                            case 1:\\n                                ns.ftpcrack(node);\\n                                break;\\n                            case 2:\\n                                ns.relaysmtp(node);\\n                                break;\\n                            case 3:\\n                                ns.httpworm(node);\\n                                break;\\n                            case 4:\\n                                ns.sqlinject(node);\\n                                break;\\n                        }\\n                    }\\n                });\\n                ns.nuke(node);\\n            }\\n        });\\n    }\\n\\n    async function __scanAndWriteRootedNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let rooted = nodes.reduce((arr, node) => {\\n            //don't hack ourselves\\n            if (ns.hasRootAccess(node) && node !== 'home' && !purchased.includes(node)) {\\n                let maxMoney = ns.getServerMaxMoney(node);\\n\\n                arr.push(`${maxMoney} ${node}`);\\n            }\\n            return arr;\\n        }, []);\\n\\n        //lowest max money at the front, filter invalid servers, remove money from name\\n        rooted.sort((a, b) => +b.split(' ')[0] - +a.split(' ')[0]);\\n        rooted = rooted.filter((node) => +node.split(' ')[0] > 0);\\n        await ns.write('money_rooted.txt', rooted, 'w');\\n\\n        rooted = rooted.map((node) => node.split(' ')[1]);\\n\\n        if (targetLimit && targetLimit != 'All') {\\n            rooted = rooted.slice(rooted.length - targetLimit);\\n        }\\n\\n        ns.tprint(`hackable nodes: ${rooted.length}`);\\n        await ns.write('rooted.txt', rooted, 'w');\\n    }\\n\\n    //read the nodes\\n    await __scanAndWriteAllNodes__();\\n    __nukeAvailableNodes__();\\n    await __scanAndWriteRootedNodes__();\\n\\n    //load nodes\\n    let attackNodes = [];\\n    if (pserv) {\\n        attackNodes = purchased;\\n    } else {\\n        attackNodes = __readNodes__('rooted.txt');\\n        if (purchased.length) {\\n            attackNodes = attackNodes.concat(purchased);\\n        }\\n    }\\n\\n    attackNodes.push('home');\\n    ns.scriptKill('daemon.js', 'home');\\n    ns.scriptKill('daemon_fml.js', 'home');\\n\\n    // spin up attack servers\\n    if (ns.getServerMaxRam('home') - ns.getServerUsedRam('home') > ns.getScriptRam('main_hack.js') * attackNodes.length)\\n        attackNodes.forEach((attacker) => {\\n            ns.exec('main_hack.js', 'home', 1, attacker, pserv || false, targetLimit || '');\\n        });\\n    else\\n        for (let i = 0; i < attackNodes.length; i++) {\\n            await ns.sleep(200);\\n            ns.exec('main_hack.js', 'home', 1, attackNodes[i], pserv || false, targetLimit || '');\\n        }\\n}\",\"filename\":\"setup_hacks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///7e50b2ab-75c3-42e9-bece-cd2a3e3ce0cd\"}],\"ramUsage\":7.35,\"server\":\"home\",\"_hash\":\"bab487f9870b5a45f142d2639c50db25528a86db6566b2dac8a46e1865ca9a5e\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet server = ns.args[0];\\n\\n\\tlet maxRam = ns.getServerMaxRam('home');\\n\\tlet usedRam = ns.getServerUsedRam('home');\\n\\tlet scriptRam = ns.getScriptRam('basic_hack.js');\\n\\tlet threads = Math.floor((maxRam - usedRam) / scriptRam);\\n\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t}\\n\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t}\\n\\n\\tns.nuke(server);\\n\\tns.run('basic_hack.js', threads, server);\\n}\",\"filename\":\"home_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\"}],\"ramUsage\":3.05,\"server\":\"home\",\"_hash\":\"14c038be817942d1f32ecaee03479bdd10d3725398564691f517ffb10d5f4d8e\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [ATTACK_SERVER, pserv, limit] = ns.args;\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    function __findAttackableNodes__() {\\n        let rooted = __readNodes__('rooted.txt');\\n        let targetNodes = [];\\n\\n        //check which are valid for attacking\\n        for (let i = 0; i < rooted.length; i++) {\\n            if (ns.getServerMaxMoney(rooted[i])) {\\n                targetNodes.push(rooted[i]);\\n            }\\n        }\\n\\n        if (pserv && limit && ATTACK_SERVER.split('-')[0] === 'pserv') {\\n            let pservNum = +ATTACK_SERVER.split('-')[2];\\n            let multiplier = Math.floor(targetNodes.length / 5);\\n\\n            if (pservNum < 5) {\\n                targetNodes = targetNodes.slice(0, multiplier);\\n            } else if (pservNum < 10) {\\n                targetNodes = targetNodes.slice(multiplier, multiplier * 2);\\n            } else if (pservNum < 15) {\\n                targetNodes = targetNodes.slice(multiplier * 2, multiplier * 3);\\n            } else if (pservNum < 20) {\\n                targetNodes = targetNodes.slice(multiplier * 3, multiplier * 4);\\n            } else {\\n                targetNodes = targetNodes.slice(multiplier * 4, -1);\\n            }\\n        }\\n\\n        return targetNodes;\\n    }\\n\\n    //prep attackServer\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js', 'daemon_fml.js'];\\n    await ns.scp(files, 'home', ATTACK_SERVER);\\n    ns.scriptKill('daemon.js', ATTACK_SERVER);\\n    ns.scriptKill('daemon_fml.js', ATTACK_SERVER);\\n\\n    //load nodes\\n    let targetNodes = __findAttackableNodes__();\\n\\n    //calc ram and threads per daemon\\n    let serverRam = ns.getServerMaxRam(ATTACK_SERVER);\\n    if (ATTACK_SERVER === 'home') {\\n        serverRam -= ns.getServerUsedRam(ATTACK_SERVER);\\n        serverRam -= ns.getScriptRam('setup_hacks.js');\\n    }\\n\\n    let daemonRam = ns.getScriptRam('daemon.js');\\n    let minRamPerDaemon =\\n        ns.getScriptRam('weaken.script') + ns.getScriptRam('grow.script') + ns.getScriptRam('hack.script');\\n\\n    let leftoverRam = serverRam - daemonRam * targetNodes.length;\\n    let ramPerDaemon = leftoverRam / targetNodes.length;\\n\\n    while (ramPerDaemon < minRamPerDaemon) {\\n        targetNodes.pop();\\n        if (!targetNodes.length) {\\n            ns.tprint(`'${ATTACK_SERVER}' - insufficient RAM: exiting`);\\n            return;\\n        }\\n\\n        if (targetNodes.length === 2 && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel('joesguns')) {\\n            targetNodes = ['joesguns'];\\n        }\\n\\n        leftoverRam = serverRam - daemonRam * targetNodes.length;\\n        ramPerDaemon = leftoverRam / targetNodes.length;\\n    }\\n\\n    //start daemons\\n    let daemonCount = 0;\\n    let daemonFile = ns.fileExists('Formulas.exe') ? 'daemon_fml.js' : 'daemon.js';\\n    targetNodes.forEach((target) => {\\n        let success = ns.exec(\\n            daemonFile,\\n            ATTACK_SERVER,\\n            1,\\n            target,\\n            ATTACK_SERVER,\\n            Math.floor(ramPerDaemon),\\n            limit || false\\n        );\\n        daemonCount += success ? 1 : 0;\\n    });\\n\\n    ns.tprint(`attack server: ${ATTACK_SERVER}`);\\n    ns.tprint(`ram/daemon: ${Math.floor(ramPerDaemon)}`);\\n    ns.tprint(`daemon count: ${daemonCount}`);\\n}\",\"filename\":\"main_hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"main_hack.js\",\"url\":\"blob:file:///93b1dc1b-5c1a-4d72-bbc6-02b6a90b076c\"}],\"ramUsage\":5.05,\"server\":\"home\",\"_hash\":\"c8795b6d9a6b34b4a211b0e588eb36eca6746f79672a751689bac00726b93714\",\"moduleSequenceNumber\":919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///d9eeae94-7628-4b0a-a8b6-23799681c9aa\"}],\"ramUsage\":5.5,\"server\":\"home\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let newSize = 0;\\n    let silent = false;\\n    if (ns.args.length > 0) {\\n        [newSize, silent] = ns.args;\\n    }\\n\\n    if (isNaN(newSize)) {\\n        newSize = 0;\\n        silent = true;\\n    }\\n\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js'];\\n    let servers = ns.getPurchasedServers();\\n\\n    if (servers.length < 25) {\\n        //buy servers until max\\n        if (!newSize) {\\n            newSize = 64;\\n        }\\n\\n        let price = ns.getPurchasedServerCost(newSize);\\n\\n        let i = servers.length;\\n        while (i < 25) {\\n            ns.print('');\\n            ns.print('===');\\n            ns.print('');\\n            let newHostname = 'pserv-' + newSize + 'gb-' + i;\\n\\n            ns.print(`attempting to purchase ${newHostname} for ${ns.nFormat(price, '$0.000a')}`);\\n\\n            if (ns.getServerMoneyAvailable('home') > price) {\\n                ns.purchaseServer(newHostname, newSize);\\n                ns.print('purchased ' + newHostname);\\n                ns.tprint('purchased ' + newHostname);\\n\\n                if (!silent) {\\n                    //start scripts on new server\\n                    await ns.scp(files, 'home', newHostname);\\n                    ns.exec('main_hack.js', 'home', 1, newHostname);\\n                }\\n\\n                ++i;\\n            }\\n\\n            if (ns.getServerMoneyAvailable('home') < price) {\\n                await ns.sleep(10000);\\n            }\\n        }\\n    } else {\\n        // upgrade existing servers\\n        let i = 0;\\n        while (i < 25) {\\n            ns.print('');\\n            ns.print('===');\\n            ns.print('');\\n            let oldServerName = servers[i];\\n            let oldServerSize = ns.getServerMaxRam(oldServerName);\\n            let newServerSize = newSize;\\n\\n            if (!newServerSize) {\\n                newServerSize = 2 * oldServerSize;\\n            }\\n\\n            let price = ns.getPurchasedServerCost(newServerSize);\\n\\n            ns.print(`looking at server: ${oldServerName} - size: ${oldServerSize} -> ${newServerSize}`);\\n\\n            if (oldServerSize < newServerSize) {\\n                let newHostname = 'pserv-' + newServerSize + 'gb-' + i;\\n\\n                ns.print(`attempt upgrade: ${oldServerName} -> ${newHostname} for ${ns.nFormat(price, '$0.000a')}`);\\n\\n                if (ns.getServerMoneyAvailable('home') > price) {\\n                    ns.killall(oldServerName);\\n                    let deleted = ns.deleteServer(oldServerName);\\n\\n                    if (deleted) {\\n                        ns.purchaseServer(newHostname, newServerSize);\\n\\n                        ns.print('purchased ' + newHostname);\\n                        ns.tprint('purchased ' + newHostname);\\n\\n                        if (!silent) {\\n                            //start scripts on new server\\n                            await ns.scp(files, 'home', newHostname);\\n                            ns.exec('main_hack.js', 'home', 1, newHostname);\\n                        }\\n                    } else {\\n                        ns.print(`${oldServerName} deletion failed`);\\n                    }\\n                    ++i;\\n                }\\n            }\\n\\n            if (oldServerSize >= newServerSize) {\\n                i++;\\n            }\\n\\n            if (ns.getServerMoneyAvailable('home') < price) {\\n                await ns.sleep(20000);\\n            }\\n        }\\n    }\\n}\",\"filename\":\"refresh_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"refresh_servers.js\",\"url\":\"blob:file:///3c8ebc6d-3966-45b5-9672-9a3156227b2d\"}],\"ramUsage\":11.15,\"server\":\"home\",\"_hash\":\"a0f23c2b61b1e1dcff13e8559ffd844de098fce27a8702e4a154d8093911b7c0\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    // We will not buy anything if there's less money than this ammount\\n    let reserveMoney = 1000;\\n    let HNT = ns.hacknet;\\n\\n    // Buy first HacknetNode if there are none\\n    if (HNT.numNodes() === 0 && ns.getServerMoneyAvailable('home') >= reserveMoney) {\\n        HNT.purchaseNode();\\n        ns.print('Purchased ' + HNT.getNodeStats(HNT.numNodes() - 1).name + ' because there was none.');\\n    }\\n\\n    // If there are no Hacknet Nodes, we can't do anything, so the script ends\\n    let numUpgrades = 1;\\n    while (HNT.numNodes() > 0) {\\n        // If there is not enough money, we wait for it instead of ending\\n        // the loop.\\n        while (ns.getServerMoneyAvailable('home') * 0.1 >= reserveMoney) {\\n            for (let i = 0; i < HNT.numNodes(); i++) {\\n                while (\\n                    HNT.getLevelUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    HNT.upgradeLevel(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + HNT.getNodeStats(i).name + ' to level ' + HNT.getNodeStats(i).level);\\n                }\\n\\n                while (\\n                    HNT.getRamUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    HNT.upgradeRam(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + HNT.getNodeStats(i).name + ' RAM to ' + HNT.getNodeStats(i).ram);\\n                }\\n\\n                while (\\n                    HNT.getCoreUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    HNT.upgradeCore(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + HNT.getNodeStats(i).name + ' core to ' + HNT.getNodeStats(i).core);\\n                }\\n            }\\n\\n            // Buy next Hacknet Node if the last one is already fully\\n            // upgraded. If for some reason the last Hacknet Node is fully\\n            // upgraded and the others don't, the loop above will still\\n            // attempt to upgrade them all.\\n            if (\\n                HNT.getLevelUpgradeCost(HNT.numNodes() - 1, numUpgrades) === Infinity &&\\n                HNT.getRamUpgradeCost(HNT.numNodes() - 1, numUpgrades) === Infinity &&\\n                HNT.getCoreUpgradeCost(HNT.numNodes() - 1, numUpgrades) === Infinity &&\\n                HNT.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                HNT.purchaseNode();\\n                ns.print(\\n                    `Purchased ${\\n                        HNT.getNodeStats(HNT.numNodes() - 1).name\\n                    } because the last one couldn't be upgraded further.`\\n                );\\n            } else if (\\n                // Or buy the next Hacknet Node if the next upgrade is more\\n                // expensive than buying a new Hacknet Node.\\n                HNT.getLevelUpgradeCost(HNT.numNodes() - 1, numUpgrades) > HNT.getPurchaseNodeCost() &&\\n                HNT.getRamUpgradeCost(HNT.numNodes() - 1, numUpgrades) > HNT.getPurchaseNodeCost() &&\\n                HNT.getCoreUpgradeCost(HNT.numNodes() - 1, numUpgrades) > HNT.getPurchaseNodeCost() &&\\n                HNT.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                HNT.purchaseNode();\\n                ns.print(\\n                    `Purchased ${HNT.getNodeStats(HNT.numNodes() - 1).name} because it was cheaper than next upgrade.`\\n                );\\n            }\\n\\n            await ns.sleep(1000);\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///7d8be283-c257-4130-96f3-0bbd397293e9\"}],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"652df912c4c46e5dd174253c86656806cdabb9ca90b2ebe872a24f98daf3cbef\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\nlet COMMISSION = 100000; //Buy or sell commission\\nlet numCycles = 2; //Each cycle is ~ 5 seconds\\nlet fracL = 0.2; //Fraction of assets to keep as cash in hand\\nlet fracH = 0.2;\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n\\n    let TIX = ns.stock;\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => (profitTracker[sym] = { profit: '$0.00', raw: 0 }));\\n\\n    function __refresh__() {\\n        let newCorpus = ns.getServerMoneyAvailable('home');\\n\\n        stocks = [];\\n        myStocks = [];\\n        syms.forEach((sym) => {\\n            let [shares] = TIX.getPosition(sym);\\n            let price = TIX.getPrice(sym);\\n            let forecast = TIX.getForecast(sym);\\n            newCorpus += price * shares;\\n\\n            if (shares) {\\n                myStocks.push({ sym, shares, price, forecast });\\n            } else {\\n                stocks.push({ sym, shares, price, forecast });\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        corpus = newCorpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '($0.00a)');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        __refresh__();\\n\\n        //Sell underperforming shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < stocks[0].forecast) {\\n                __sell__(stock, stock.shares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        //Sell shares if not enough cash in hand\\n        myStocks.forEach((stock) => {\\n            if (ns.getServerMoneyAvailable('home') < fracL * corpus) {\\n                let cashNeeded = corpus * fracH - ns.getServerMoneyAvailable('home') + COMMISSION;\\n                let numShares = Math.floor(cashNeeded / stock.price);\\n\\n                __sell__(stock, numShares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        // Buy shares with cash remaining in hand\\n        let cashToSpend = ns.getServerMoneyAvailable('home') - fracH * corpus;\\n        let numShares = Math.floor((cashToSpend - COMMISSION) / stocks[0].price);\\n        let maxShares = TIX.getMaxShares(stocks[0].sym) - stocks[0].shares;\\n\\n        numShares = Math.min(numShares, maxShares);\\n\\n        ns.print('stocks[0].price: ' + stocks[0].price);\\n        ns.print('corpus: ' + corpus);\\n        ns.print('cashToSpend: ' + cashToSpend);\\n\\n        if (numShares * stocks[0].forecast * stocks[0].price * numCycles > COMMISSION) {\\n            __buy__(stocks[0], numShares);\\n        }\\n\\n        await ns.sleep(5 * 1000 * numCycles + 200);\\n    }\\n}\",\"filename\":\"stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///8f829e6a-aece-4fe8-99ae-8f1c81465c47\"}],\"ramUsage\":17.2,\"server\":\"home\",\"_hash\":\"b9bcf2be9c7706da63fb4e833eafc0a1a1ac4fd683d532f8bf5186763f5af5a4\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\t//get the TOR router\\n\\twhile (!ns.purchaseTor()) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\t//buy programs in this order\\n\\tlet cheapProgramList = [\\n\\t\\t'BruteSSH.exe',\\n\\t\\t'FTPCrack.exe',\\n\\t\\t'AutoLink.exe',\\n\\t\\t'DeepscanV1.exe',\\n\\t\\t'ServerProfiler.exe',\\n\\t\\t'DeepscanV2.exe',\\n\\t];\\n\\tfor (let i = 0; i < cheapProgramList.length; i++) {\\n\\t\\tlet prg = cheapProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n\\n\\t//buy baseline 64g servers\\n\\twhile (ns.getServerMoneyAvailable('home') < 88000000) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\tns.run('refresh_servers.js', 1, 64);\\n\\n\\t//buy programs in this order\\n\\tlet priceyProgramList = ['DeepscanV2.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe'];\\n\\tfor (let i = 0; i < priceyProgramList.length; i++) {\\n\\t\\tlet prg = priceyProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"buy_darkweb.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_darkweb.js\",\"url\":\"blob:file:///2a3a7ebd-7bef-459a-9cc1-554a8d433205\"}],\"ramUsage\":66.7,\"server\":\"home\",\"_hash\":\"4b23f33ef10c4f22e88ad0f6c473e6d326f1bafaee03aca06626e9dbbbc384e9\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n\\r\\n    let COMMISSION = 100000; //Buy or sell commission\\r\\n\\r\\n    if (ns.isRunning('stocks.js', 'home')) {\\r\\n        ns.kill('stocks.js', 'home');\\r\\n    }\\r\\n\\r\\n    function __format__(profit) {\\r\\n        return ns.nFormat(profit, '-$0.00a');\\r\\n    }\\r\\n\\r\\n    let TIX = ns.stock;\\r\\n    let syms = TIX.getSymbols();\\r\\n\\r\\n    syms.forEach((sym) => {\\r\\n        let [numShares] = TIX.getPosition(sym);\\r\\n        if (numShares) {\\r\\n            let profitPer = TIX.sell(sym, numShares);\\r\\n            let profit = __format__(profitPer * numShares - COMMISSION);\\r\\n            ns.tprint(`Sold ${profitPer ? numShares : 0} shares of ${sym} for profit of ${profit}`);\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"sell_stocks.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"sell_stocks.js\",\"url\":\"blob:file:///862d6ec7-49ed-438c-acc4-c73cedf77775\"}],\"ramUsage\":8.7,\"server\":\"home\",\"_hash\":\"9818913a8426e7bc4615bec616a98b69d0a0e69e79b42a2f5ba34f09b2e39c59\",\"moduleSequenceNumber\":983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    const TIX = ns.stock;\\n\\n    const KEEP = 0.2;\\n    const BUY_LIMIT = 0.58;\\n    const SELL_LIMIT = 0.5;\\n    const COMMISSION = 100000;\\n\\n    //init stocks\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => {\\n        stocks.push({ sym });\\n        profitTracker[sym] = { profit: '$0.00', raw: 0 };\\n    });\\n\\n    function __updateStockData__() {\\n        let corpus = ns.getServerMoneyAvailable('home');\\n        myStocks.length = 0;\\n\\n        stocks.forEach((stock) => {\\n            let sym = stock.sym;\\n            stock.price = TIX.getPrice(sym);\\n            stock.shares = TIX.getPosition(sym)[0];\\n            stock.forecast = TIX.getForecast(sym);\\n\\n            corpus += stock.price * stock.shares;\\n\\n            if (stock.shares) {\\n                myStocks.push(stock);\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        return corpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '-$0.00a');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        corpus = __updateStockData__();\\n\\n        // Sell bad shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < SELL_LIMIT) {\\n                ns.print(`${stock.sym} no longer valuable - selling.`);\\n                __sell__(stock, stock.shares);\\n            }\\n        });\\n\\n        // Don't do this. Use getStockPurchaseCost for some proportion of corpus,\\n        // then reduce it by a certain % until it's buyable.\\n\\n        let stockIndex = -1;\\n        let cashToSpend = ns.getServerMoneyAvailable('home');\\n        while (cashToSpend > 100 * COMMISSION && cashToSpend > corpus * 0.1) {\\n            stockIndex++;\\n            corpus = __updateStockData__();\\n\\n            let stockToBuy = stocks[stockIndex];\\n            if (!stockToBuy || stockToBuy.forecast < BUY_LIMIT) {\\n                // No more (good) stocks left\\n                break;\\n            }\\n\\n            let availibleShares = TIX.getMaxShares(stockToBuy.sym) - stockToBuy.shares;\\n            if (!availibleShares) {\\n                // We bought all shares of this stock\\n                continue;\\n            }\\n\\n            while (availibleShares) {\\n                let purchaseCost = TIX.getPurchaseCost(stockToBuy.sym, availibleShares, 'Long');\\n                if (purchaseCost <= cashToSpend) {\\n                    __buy__(stockToBuy, availibleShares);\\n                    cashToSpend -= purchaseCost;\\n                    break;\\n                }\\n\\n                availibleShares = Math.floor(availibleShares * 0.9);\\n            }\\n        }\\n\\n        await ns.sleep(5 * 1000);\\n    }\\n}\",\"filename\":\"stocks_V2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"stocks_V2.js\",\"url\":\"blob:file:///2e569d83-c133-4598-aaf1-08e5a925aaba\"}],\"ramUsage\":19.2,\"server\":\"home\",\"_hash\":\"c6d388b4c5d6ee07d6e33f810f1ccc82a16f93b5e1c9651bfb8380ce826638a1\",\"moduleSequenceNumber\":984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9e619082-1029-4354-8e9f-d4f27cde300f\"}],\"ramUsage\":6.05,\"server\":\"home\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n\\n    let nodes = {\\n        home: roots.reduce((obj, node) => {\\n            let maxMoney = ns.nFormat(ns.getServerMaxMoney(node), '$0.00a');\\n            let hackingReq = ns.getServerRequiredHackingLevel(node);\\n            let childName = `${node} - ${maxMoney} - ${hackingReq}`;\\n\\n            obj[childName] = {};\\n            return obj;\\n        }, {})\\n    };\\n\\n    roots.unshift('home');\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        ns.tprint('');\\n        ns.tprint('      rootName: ', rootNode);\\n        ns.tprint('connectedNodes: ', connectedNodes);\\n        ns.tprint('         roots: ', roots);\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let maxMoney = ns.nFormat(ns.getServerMaxMoney(childNode), '$0.00a');\\n                let hackingReq = ns.getServerRequiredHackingLevel(childNode);\\n                let childName = `${childNode} - ${maxMoney} - ${hackingReq}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n    }\\n\\n    Object.keys(nodes.home).forEach((node) => {\\n        traverseNodes(nodes.home[node], node.split(' ')[0]);\\n    });\\n    await ns.write('servers.txt', JSON.stringify(nodes), 'w');\\n    ns.tprint(nodes);\\n}\",\"filename\":\"scan_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scan_servers.js\",\"url\":\"blob:file:///1d00116b-76eb-4523-8a02-64b4083e5382\"}],\"ramUsage\":2,\"server\":\"home\",\"_hash\":\"90330bb76b24adcf682a1cd4bc71810366d4722f7b98d2a67769ace055bf2fd7\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let purchased = ns.getPurchasedServers();\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    async function __scanAndWriteAllNodes__() {\\n        let nodes = [];\\n        let newNodes = ['home'];\\n        let newNodes2 = [];\\n        let repeat = true;\\n\\n        while (repeat) {\\n            newNodes2 = [];\\n            repeat = false;\\n\\n            let i, j;\\n            for (i = 0; i < newNodes.length; i++) {\\n                let connected = ns.scan(newNodes[i]);\\n\\n                for (j = 0; j < connected.length; j++) {\\n                    let node = connected[j];\\n                    if (!nodes.includes(node) && !newNodes.includes(node) && !newNodes2.includes(node)) {\\n                        newNodes2.push(node);\\n                        repeat = true;\\n                    }\\n                }\\n            }\\n\\n            nodes = nodes.concat(newNodes);\\n            newNodes = newNodes2;\\n        }\\n\\n        nodes = nodes.concat(purchased);\\n        await ns.write('nodes.txt', nodes, 'w');\\n    }\\n\\n    function __nukeAvailableNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let myHackLevel = ns.getHackingLevel();\\n\\n        let Programs = [\\n            ns.fileExists('BruteSSH.exe'),\\n            ns.fileExists('FTPCrack.exe'),\\n            ns.fileExists('relaySMTP.exe'),\\n            ns.fileExists('HTTPWorm.exe'),\\n            ns.fileExists('SQLInject.exe')\\n        ];\\n\\n        let availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n        nodes.forEach((node) => {\\n            if (\\n                !ns.hasRootAccess(node) &&\\n                ns.getServerNumPortsRequired(node) <= availPrograms &&\\n                ns.getServerRequiredHackingLevel(node) <= myHackLevel\\n            ) {\\n                Programs.forEach((exists, i) => {\\n                    if (exists) {\\n                        switch (i) {\\n                            case 0:\\n                                ns.brutessh(node);\\n                                break;\\n                            case 1:\\n                                ns.ftpcrack(node);\\n                                break;\\n                            case 2:\\n                                ns.relaysmtp(node);\\n                                break;\\n                            case 3:\\n                                ns.httpworm(node);\\n                                break;\\n                            case 4:\\n                                ns.sqlinject(node);\\n                                break;\\n                        }\\n                    }\\n                });\\n                ns.nuke(node);\\n                ns.tprint(`NUKE: ${node}`)\\n            }\\n        });\\n    }\\n\\n\\n    //read the nodes\\n    await __scanAndWriteAllNodes__();\\n    __nukeAvailableNodes__();\\n}\",\"filename\":\"nuke_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"nuke_servers.js\",\"url\":\"blob:file:///9112e9ca-00b6-4e9e-913b-9f3180a303ca\"}],\"ramUsage\":4.75,\"server\":\"home\",\"_hash\":\"fd0ed6db573bff7f57e5883f86054f664a0ba57ab679b97e64338ba0d8c80f91\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.deleteServer('pserv-64gb-24-0')\\n}\",\"filename\":\"adhoc.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"adhoc.js\",\"url\":\"blob:file:///b2e2c27b-8ffe-4fab-926f-a84b5074e245\"}],\"ramUsage\":3.85,\"server\":\"home\",\"_hash\":\"344bb010339ae80ed6bf4b096cb3818b4424008a9b04085ab0d04c5ae1f56b3b\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// ns.disableLog('ALL')\\n\\t// ns.getServerMaxRam('home')\\n\\t// ns.enableLog('exec')\\n\\t// ns.enableLog('weaken')\\n\\t// ns.enableLog('grow')\\n\\t// ns.enableLog('hack')\\n\\t// ns.enableLog('getServerUsedRam')\\n\\t// ns.enableLog('getServerSecurityLevel')\\n\\t// ns.enableLog('getServerMoneyAvailable')\\n\\t// ns.enableLog('hackAnalyze')\\n\\t// ns.enableLog('growthAnalyze')\\n\\t// ns.getServerMaxRam('home')\\n\\n\\tns.tprint(ns.getServerMoneyAvailable('home'))\\n\\n\\tns.formulas.skills.calculateExp(1)\\n\\n\\t// while (true) {\\n\\t// \\tawait ns.sleep(100000)\\n\\t// }\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"afe8e263b0ef5729a6b7245fa5e13e8250fed27d7a6a905007592d4fb97599de\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-4096gb-0\",\"pserv-4096gb-1\",\"pserv-4096gb-2\",\"pserv-4096gb-3\",\"pserv-4096gb-4\",\"pserv-4096gb-5\",\"pserv-4096gb-6\",\"pserv-4096gb-7\",\"pserv-4096gb-8\",\"pserv-4096gb-9\",\"pserv-4096gb-10\",\"pserv-4096gb-11\",\"pserv-4096gb-12\",\"pserv-4096gb-13\",\"pserv-4096gb-14\",\"pserv-4096gb-15\",\"pserv-4096gb-16\",\"pserv-4096gb-17\",\"pserv-4096gb-18\",\"pserv-4096gb-19\",\"pserv-4096gb-20\",\"pserv-4096gb-21\",\"pserv-4096gb-22\",\"pserv-4096gb-23\",\"pserv-4096gb-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"nodes.txt\",\"text\":\"home,n00dles,foodnstuff,sigma-cosmetics,joesguns,hong-fang-tea,harakiri-sushi,iron-gym,darkweb,pserv-4096gb-0,pserv-4096gb-1,pserv-4096gb-2,pserv-4096gb-3,pserv-4096gb-4,pserv-4096gb-5,pserv-4096gb-6,pserv-4096gb-7,pserv-4096gb-8,pserv-4096gb-9,pserv-4096gb-10,pserv-4096gb-11,pserv-4096gb-12,pserv-4096gb-13,pserv-4096gb-14,pserv-4096gb-15,pserv-4096gb-16,pserv-4096gb-17,pserv-4096gb-18,pserv-4096gb-19,pserv-4096gb-20,pserv-4096gb-21,pserv-4096gb-22,pserv-4096gb-23,pserv-4096gb-24,nectar-net,max-hardware,zer0,CSEC,neo-net,omega-net,silver-helix,phantasy,the-hub,netlink,avmnite-02h,comptek,johnson-ortho,crush-fitness,summit-uni,syscore,I.I.I.I,zb-institute,rothman-uni,catalyst,alpha-ent,aevum-police,rho-construction,lexo-corp,millenium-fitness,global-pharm,aerocorp,galactic-cyber,snap-fitness,omnia,deltaone,unitalife,univ-energy,solaris,defcomm,icarus,zeus-med,infocomm,taiyang-digital,zb-def,nova-med,titan-labs,microdyne,applied-energetics,run4theh111z,vitalife,fulcrumtech,stormtech,helios,4sigma,.,omnitek,kuai-gong,powerhouse-fitness,blade,b-and-a,nwo,clarkinc,The-Cave,ecorp,megacorp,fulcrumassets,pserv-4096gb-0,pserv-4096gb-1,pserv-4096gb-2,pserv-4096gb-3,pserv-4096gb-4,pserv-4096gb-5,pserv-4096gb-6,pserv-4096gb-7,pserv-4096gb-8,pserv-4096gb-9,pserv-4096gb-10,pserv-4096gb-11,pserv-4096gb-12,pserv-4096gb-13,pserv-4096gb-14,pserv-4096gb-15,pserv-4096gb-16,pserv-4096gb-17,pserv-4096gb-18,pserv-4096gb-19,pserv-4096gb-20,pserv-4096gb-21,pserv-4096gb-22,pserv-4096gb-23,pserv-4096gb-24\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"rooted.txt\",\"text\":\"megacorp,ecorp,blade,nwo,b-and-a,kuai-gong,4sigma,clarkinc,omnitek,fulcrumtech,global-pharm,zeus-med,deltaone,nova-med,univ-energy,aerocorp,zb-institute,stormtech,zb-def,unitalife,icarus,omnia,applied-energetics,powerhouse-fitness,titan-labs,taiyang-digital,infocomm,solaris,defcomm,lexo-corp,galactic-cyber,helios,vitalife,microdyne,rho-construction,alpha-ent,syscore,snap-fitness,catalyst,aevum-police,netlink,millenium-fitness,summit-uni,comptek,rothman-uni,the-hub,johnson-ortho,omega-net,crush-fitness,silver-helix,phantasy,iron-gym,max-hardware,zer0,neo-net,harakiri-sushi,hong-fang-tea,nectar-net,joesguns,sigma-cosmetics,foodnstuff,fulcrumassets,n00dles\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servers.txt\",\"text\":\"{\\\"home\\\":{\\\"n00dles - $1.75m - 1\\\":{},\\\"foodnstuff - $50.00m - 1\\\":{},\\\"sigma-cosmetics - $57.50m - 5\\\":{},\\\"joesguns - $62.50m - 10\\\":{\\\"nectar-net - $68.75m - 20\\\":{},\\\"max-hardware - $250.00m - 80\\\":{\\\"neo-net - $125.00m - 50\\\":{\\\"the-hub - $4.58b - 302\\\":{\\\"summit-uni - $6.09b - 462\\\":{}},\\\"netlink - $6.88b - 395\\\":{},\\\"avmnite-02h - $0.00 - 202\\\":{\\\"syscore - $12.04b - 578\\\":{\\\"alpha-ent - $15.85b - 579\\\":{\\\"global-pharm - $41.49b - 846\\\":{\\\"omnia - $24.93b - 900\\\":{\\\"univ-energy - $29.82b - 837\\\":{\\\"infocomm - $21.13b - 903\\\":{},\\\"taiyang-digital - $21.14b - 944\\\":{\\\"titan-labs - $21.96b - 829\\\":{},\\\"microdyne - $16.49b - 875\\\":{\\\"vitalife - $17.62b - 886\\\":{\\\"4sigma - $500.81b - 918\\\":{\\\"powerhouse-fitness - $22.50b - 982\\\":{}},\\\". - $0.00 - 510\\\":{\\\"blade - $940.40b - 1194\\\":{\\\"The-Cave - $0.00 - 925\\\":{}}}}}}},\\\"solaris - $20.25b - 820\\\":{}},\\\"deltaone - $37.38b - 824\\\":{}}}},\\\"I.I.I.I - $0.00 - 349\\\":{\\\"aevum-police - $7.74b - 440\\\":{\\\"aerocorp - $27.60b - 854\\\":{}}}}},\\\"omega-net - $1.69b - 182\\\":{}}},\\\"hong-fang-tea - $75.00m - 30\\\":{},\\\"harakiri-sushi - $100.00m - 40\\\":{\\\"zer0 - $187.50m - 75\\\":{\\\"silver-helix - $1.13b - 150\\\":{},\\\"phantasy - $600.00m - 100\\\":{\\\"comptek - $5.74b - 366\\\":{\\\"zb-institute - $26.26b - 758\\\":{\\\"rho-construction - $15.95b - 524\\\":{\\\"galactic-cyber - $19.06b - 858\\\":{\\\"unitalife - $25.34b - 824\\\":{\\\"defcomm - $20.12b - 907\\\":{},\\\"icarus - $24.95b - 877\\\":{},\\\"zeus-med - $37.44b - 827\\\":{\\\"zb-def - $25.67b - 810\\\":{},\\\"nova-med - $30.54b - 836\\\":{\\\"applied-energetics - $23.09b - 828\\\":{\\\"fulcrumtech - $42.97b - 1070\\\":{\\\"omnitek - $379.12b - 1054\\\":{\\\"b-and-a - $701.92b - 1011\\\":{\\\"ecorp - $1.24t - 1332\\\":{}},\\\"nwo - $788.20b - 1254\\\":{\\\"megacorp - $1.41t - 1238\\\":{},\\\"fulcrumassets - $25.00m - 1103\\\":{}}},\\\"kuai-gong - $668.43b - 1203\\\":{\\\"clarkinc - $461.83b - 1033\\\":{}}}},\\\"run4theh111z - $0.00 - 509\\\":{\\\"stormtech - $25.77b - 1006\\\":{},\\\"helios - $18.29b - 820\\\":{}}}}}},\\\"snap-fitness - $11.25b - 749\\\":{}}}},\\\"johnson-ortho - $1.93b - 278\\\":{\\\"rothman-uni - $5.43b - 402\\\":{\\\"lexo-corp - $19.33b - 651\\\":{},\\\"millenium-fitness - $6.25b - 513\\\":{}}},\\\"crush-fitness - $1.42b - 246\\\":{\\\"catalyst - $11.11b - 410\\\":{}}}}},\\\"iron-gym - $500.00m - 100\\\":{\\\"CSEC - $0.00 - 51\\\":{}},\\\"darkweb - $0.00 - 1\\\":{}}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"money_rooted.txt\",\"text\":\"1413244366625 megacorp,1240518321975 ecorp,940401725225 blade,788203616250 nwo,701916052550 b-and-a,668428858850 kuai-gong,500814942850 4sigma,461826989550 clarkinc,379116457150 omnitek,42969727875 fulcrumtech,41494959925 global-pharm,37440772875 zeus-med,37375834175 deltaone,30543595000 nova-med,29815501075 univ-energy,27602984025 aerocorp,26261462875 zb-institute,25768232025 stormtech,25674884050 zb-def,25339714900 unitalife,24947897175 icarus,24934298950 omnia,23093522150 applied-energetics,22500000000 powerhouse-fitness,21956716000 titan-labs,21142741350 taiyang-digital,21129090450 infocomm,20252279750 solaris,20117010975 defcomm,19326367750 lexo-corp,19055007425 galactic-cyber,18285122925 helios,17623540375 vitalife,16485562700 microdyne,15952082400 rho-construction,15845485425 alpha-ent,12038948375 syscore,11250000000 snap-fitness,11110097075 catalyst,7741305150 aevum-police,6875000000 netlink,6250000000 millenium-fitness,6085378075 summit-uni,5739680400 comptek,5431792050 rothman-uni,4579947125 the-hub,1934391250 johnson-ortho,1692979575 omega-net,1419722625 crush-fitness,1125000000 silver-helix,600000000 phantasy,500000000 iron-gym,250000000 max-hardware,187500000 zer0,125000000 neo-net,100000000 harakiri-sushi,75000000 hong-fang-tea,68750000 nectar-net,62500000 joesguns,57500000 sigma-cosmetics,50000000 foodnstuff,25000000 fulcrumassets,1750000 n00dles\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"2.3.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"ecorp\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"ecorp\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":198,\"hackDifficulty\":66,\"minDifficulty\":66,\"moneyAvailable\":1240518321975,\"moneyMax\":1240518321975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1332,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"44.7.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"megacorp\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"megacorp\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":198,\"hackDifficulty\":66,\"minDifficulty\":66,\"moneyAvailable\":1413244366625,\"moneyMax\":1413244366625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1238,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"70.4.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"b-and-a\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"b-and-a\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":144,\"hackDifficulty\":48,\"minDifficulty\":48,\"moneyAvailable\":701916052550,\"moneyMax\":701916052550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1011,\"serverGrowth\":65}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"44.9.4.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"blade\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"blade\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":186,\"hackDifficulty\":62,\"minDifficulty\":62,\"moneyAvailable\":940401725225,\"moneyMax\":940401725225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1194,\"serverGrowth\":74}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"33.8.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"nwo\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"nwo\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":66,\"minDifficulty\":66,\"moneyAvailable\":788203616250,\"moneyMax\":788203616250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1254,\"serverGrowth\":76}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-739038.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"3932\",-73],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-377552.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,12],[20,23],[17,23],[15,22],[14,24],[9,13]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"68.6.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"clarkinc\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"clarkinc\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118,\"hackDifficulty\":39,\"minDifficulty\":39,\"moneyAvailable\":461826989550,\"moneyMax\":461826989550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1033,\"serverGrowth\":52}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"43.8.9.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"omnitek\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"omnitek\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":188,\"hackDifficulty\":63,\"minDifficulty\":63,\"moneyAvailable\":379116457150,\"moneyMax\":379116457150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1054,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-247018.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":178925807,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"31.6.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"4sigma\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"4sigma\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":50,\"minDifficulty\":50,\"moneyAvailable\":500814942850,\"moneyMax\":500814942850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":918,\"serverGrowth\":77}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-531999.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[7,5],[7,9,3],[5,6,2,8],[4,1,8,4,2],[9,1,4,5,8,3],[8,8,6,9,3,8,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"35.0.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"kuai-gong\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"kuai-gong\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":196,\"hackDifficulty\":65,\"minDifficulty\":65,\"moneyAvailable\":668428858850,\"moneyMax\":668428858850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1203,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"66.4.8.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"fulcrumtech\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"fulcrumtech\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":178,\"hackDifficulty\":59,\"minDifficulty\":59,\"moneyAvailable\":42969727875,\"moneyMax\":42969727875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1070,\"serverGrowth\":85}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"83.4.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"fulcrumassets\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"fulcrumassets\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":66,\"minDifficulty\":66,\"moneyAvailable\":25000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1103,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"75.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"stormtech\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"stormtech\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":53,\"minDifficulty\":53,\"moneyAvailable\":25768232025,\"moneyMax\":25768232025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1006,\"serverGrowth\":84}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"87.7.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"defcomm\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"defcomm\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":192,\"hackDifficulty\":64,\"minDifficulty\":64,\"moneyAvailable\":20117010975,\"moneyMax\":20117010975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":907,\"serverGrowth\":66}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"84.3.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"infocomm\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"infocomm\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":52,\"minDifficulty\":52,\"moneyAvailable\":21129090450,\"moneyMax\":21129090450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":42}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-433385-BitRunners.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1863517718\",\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"14.3.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"helios\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"helios\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":186,\"hackDifficulty\":62,\"minDifficulty\":62,\"moneyAvailable\":18285122925,\"moneyMax\":18285122925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"11.5.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"vitalife\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"vitalife\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":172,\"hackDifficulty\":57,\"minDifficulty\":57,\"moneyAvailable\":17623540375,\"moneyMax\":17623540375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":60}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-782653.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"821253848\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"64.5.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"icarus\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"icarus\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":170,\"hackDifficulty\":57,\"minDifficulty\":57,\"moneyAvailable\":24947897175,\"moneyMax\":24947897175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":877,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"79.2.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"univ-energy\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"univ-energy\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":178,\"hackDifficulty\":59,\"minDifficulty\":59,\"moneyAvailable\":29815501075,\"moneyMax\":29815501075,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":837,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"25.2.9.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"titan-labs\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"titan-labs\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":49,\"minDifficulty\":49,\"moneyAvailable\":21956716000,\"moneyMax\":21956716000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":829,\"serverGrowth\":75}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"64.7.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"microdyne\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"microdyne\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":50,\"minDifficulty\":50,\"moneyAvailable\":16485562700,\"moneyMax\":16485562700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":875,\"serverGrowth\":70}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"49.8.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"taiyang-digital\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"taiyang-digital\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":49,\"minDifficulty\":49,\"moneyAvailable\":21142741350,\"moneyMax\":21142741350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":944,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"70.3.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"galactic-cyber\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"galactic-cyber\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124,\"hackDifficulty\":41,\"minDifficulty\":41,\"moneyAvailable\":19055007425,\"moneyMax\":19055007425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"23.9.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"aerocorp\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"aerocorp\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":59,\"minDifficulty\":59,\"moneyAvailable\":27602984025,\"moneyMax\":27602984025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509347-BitRunners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,21],[14,15],[9,14],[1,2],[16,22],[18,22],[1,10],[19,23],[13,21],[5,15],[17,26],[7,9],[10,13],[21,27],[8,17]],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-401910.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8831819\",3],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"82.9.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"omnia\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"omnia\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":178,\"hackDifficulty\":59,\"minDifficulty\":59,\"moneyAvailable\":24934298950,\"moneyMax\":24934298950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":900,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-337262.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":150055976,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"68.9.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"zb-def\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"zb-def\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112,\"hackDifficulty\":37,\"minDifficulty\":37,\"moneyAvailable\":25674884050,\"moneyMax\":25674884050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":810,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"77.3.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"applied-energetics\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"applied-energetics\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":46,\"minDifficulty\":46,\"moneyAvailable\":23093522150,\"moneyMax\":23093522150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":828,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-260691-Sector-12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,0,0],[0,0,1],[0,0,0],[0,0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"1.8.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"solaris\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"solaris\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":52,\"minDifficulty\":52,\"moneyAvailable\":20252279750,\"moneyMax\":20252279750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-518354.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[159,25,158,93,107,58,34,15,5,115,197,134,19,63,73,137],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-936875-TheBlackHand.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"888689\",-97],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"34.9.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"deltaone\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"deltaone\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":170,\"hackDifficulty\":57,\"minDifficulty\":57,\"moneyAvailable\":37375834175,\"moneyMax\":37375834175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":58}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"24.4.0.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"global-pharm\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"global-pharm\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":170,\"hackDifficulty\":57,\"minDifficulty\":57,\"moneyAvailable\":41494959925,\"moneyMax\":41494959925,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":846,\"serverGrowth\":81}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"25.7.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"nova-med\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"nova-med\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":49,\"minDifficulty\":49,\"moneyAvailable\":30543595000,\"moneyMax\":30543595000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":836,\"serverGrowth\":71}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"96.9.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"zeus-med\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"zeus-med\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":59,\"minDifficulty\":59,\"moneyAvailable\":37440772875,\"moneyMax\":37440772875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":78}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"5.0.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"unitalife\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"unitalife\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":53,\"minDifficulty\":53,\"moneyAvailable\":25339714900,\"moneyMax\":25339714900,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":824,\"serverGrowth\":79}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-714408.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":803225756,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"5.0.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"lexo-corp\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"lexo-corp\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":43,\"minDifficulty\":43,\"moneyAvailable\":19326367750,\"moneyMax\":19326367750,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":651,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"96.5.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"rho-construction\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"rho-construction\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30.002,\"minDifficulty\":30,\"moneyAvailable\":15911557378,\"moneyMax\":15952082400,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":524,\"serverGrowth\":47}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-776127.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[177,163,178,75,164,107,81,166,104]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"81.2.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"alpha-ent\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"alpha-ent\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":46,\"minDifficulty\":46,\"moneyAvailable\":15842793687.921738,\"moneyMax\":15845485425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":579,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"51.7.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"aevum-police\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"aevum-police\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152,\"hackDifficulty\":51,\"minDifficulty\":51,\"moneyAvailable\":7734143493.345004,\"moneyMax\":7741305150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":440,\"serverGrowth\":34}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"2.5.8.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"rothman-uni\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":110,\"hackDifficulty\":37.002,\"minDifficulty\":37,\"moneyAvailable\":5418690724,\"moneyMax\":5431792050,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":402,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-254405.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"14812815926\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"18.7.2.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"zb-institute\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"zb-institute\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"comptek\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":158,\"hackDifficulty\":53,\"minDifficulty\":53,\"moneyAvailable\":26261462875,\"moneyMax\":26261462875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":758,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-471409.cct\",\"type\":\"Total Ways to Sum\",\"data\":89,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"36.0.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"summit-uni\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"summit-uni\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":128,\"hackDifficulty\":43,\"minDifficulty\":43,\"moneyAvailable\":6081816655.838436,\"moneyMax\":6085378075,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":462,\"serverGrowth\":48}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"63.7.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"syscore\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"syscore\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":134,\"hackDifficulty\":45,\"minDifficulty\":45,\"moneyAvailable\":12037671306.878654,\"moneyMax\":12038948375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":578,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"88.5.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"catalyst\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"catalyst\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":134,\"hackDifficulty\":45,\"minDifficulty\":45,\"moneyAvailable\":11099051289.366703,\"moneyMax\":11110097075,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":410,\"serverGrowth\":36}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"20.9.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"the-hub\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"the-hub\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30.002,\"minDifficulty\":30,\"moneyAvailable\":4567149150,\"moneyMax\":4579947125,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":302,\"serverGrowth\":50}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-9021.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"11716250211\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"98.4.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"comptek\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"comptek\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":128,\"hackDifficulty\":43,\"minDifficulty\":43,\"moneyAvailable\":5736176127.45943,\"moneyMax\":5739680400,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":366,\"serverGrowth\":50}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"70.3.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"netlink\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"netlink\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":50,\"minDifficulty\":50,\"moneyAvailable\":6871673474.566575,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":395,\"serverGrowth\":52}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"55.3.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"johnson-ortho\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"johnson-ortho\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":102,\"hackDifficulty\":34.002,\"minDifficulty\":34,\"moneyAvailable\":1929244695,\"moneyMax\":1934391250,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":278,\"serverGrowth\":63}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-347701.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[119,99,138,122,125,185,17,30,2,106,48,153,161,175,135,90,195,39,189,3,191,8,62,21,128,17,70,185,21,73,183,156,60]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"89.9.6.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"n00dles\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"n00dles\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"76.7.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"foodnstuff\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"foodnstuff\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"57.8.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"sigma-cosmetics\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"sigma-cosmetics\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"17.0.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"joesguns\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"joesguns\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"19.0.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"zer0\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"zer0\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-767807-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[200,131,42,49,174,125,163,72,32,194,45,199,124],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-131589.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":173472882,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-937782.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[1,90,81,115,176,39,54,149,153,5],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"93.5.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"nectar-net\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"nectar-net\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-436298.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-6,5,4,-6,-8,-9,-4,6,3,7,-8,8,-10,3,-2,2,-2,6,-5,4,2,6,-3,9,-4,-2,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"29.3.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"neo-net\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"neo-net\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17.004,\"minDifficulty\":17,\"moneyAvailable\":124086232,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-450155-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[92,8,39],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-374182.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[78,116,30,50,70,181,73,63,39,25,74,104,60,39,2,178,25,30,7,153,145,61,62,78,46,196,15,73,101,79,37,89],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"90.5.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"silver-helix\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"silver-helix\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20.004,\"minDifficulty\":20,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"1.9.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"hong-fang-tea\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"hong-fang-tea\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"54.2.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"harakiri-sushi\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"harakiri-sushi\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.011999999999999,\"minDifficulty\":10,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"36.9.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"phantasy\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"phantasy\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"1.8.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"max-hardware\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"max-hardware\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.004,\"minDifficulty\":10,\"moneyAvailable\":248040394,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"94.2.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"omega-net\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"omega-net\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17.004,\"minDifficulty\":17,\"moneyAvailable\":1692979575,\"moneyMax\":1692979575,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":182,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"59.3.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"crush-fitness\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"crush-fitness\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":28.006,\"minDifficulty\":28,\"moneyAvailable\":1417786356.5934865,\"moneyMax\":1419722625,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":246,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"83.8.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"iron-gym\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"iron-gym\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20.002,\"minDifficulty\":20,\"moneyAvailable\":498271200,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-369402-TheBlackHand.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"23810210653\",\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-577034.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[172,160,176,71,178,123,43,101,85,13,111,103,71,164,198,176,145,50,152,83,172,152,175,166,91,2,153,3,30,35,149,66,5,190,55,114,188,187,50,7,154,82,164,58,34,200],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"80.0.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"millenium-fitness\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"millenium-fitness\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":6244659587.64534,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":513,\"serverGrowth\":38}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-746259.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"124112672\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"75.7.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"powerhouse-fitness\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f779cb6a-fe17-4971-868e-404ec95616c1\"}],\"ramUsage\":6.05,\"server\":\"powerhouse-fitness\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":38,\"minDifficulty\":38,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":982,\"serverGrowth\":57}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"6.0.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"snap-fitness\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"snap-fitness\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":38,\"minDifficulty\":38,\"moneyAvailable\":11250000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":749,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"19.8.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":509,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"91.7.5.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":349,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-814378.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"5303615\",28],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-169259.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"144132221194\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"38.7.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":202,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-412753.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,5],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"57.3.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":510,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"28.7.1.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"37.3.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"54.0.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":4500,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"67.4.0.8\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-0\",\"httpPortOpen\":false,\"ip\":\"10.1.1.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-0\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-1\",\"httpPortOpen\":false,\"ip\":\"60.6.6.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-1\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-2\",\"httpPortOpen\":false,\"ip\":\"78.0.5.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-2\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-3\",\"httpPortOpen\":false,\"ip\":\"93.0.1.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-3\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-4\",\"httpPortOpen\":false,\"ip\":\"30.4.6.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-4\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-5\",\"httpPortOpen\":false,\"ip\":\"11.2.5.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-5\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-6\",\"httpPortOpen\":false,\"ip\":\"3.1.4.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-6\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-7\",\"httpPortOpen\":false,\"ip\":\"44.3.0.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-7\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-8\",\"httpPortOpen\":false,\"ip\":\"32.9.1.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-8\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-9\",\"httpPortOpen\":false,\"ip\":\"77.5.3.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-9\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-10\",\"httpPortOpen\":false,\"ip\":\"86.6.7.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-10\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-11\",\"httpPortOpen\":false,\"ip\":\"65.8.8.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-11\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-11\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-12\",\"httpPortOpen\":false,\"ip\":\"93.6.8.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-12\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-13\",\"httpPortOpen\":false,\"ip\":\"42.8.2.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-13\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-13\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-14\",\"httpPortOpen\":false,\"ip\":\"48.4.4.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-14\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-14\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-14\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-14\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-14\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-15\",\"httpPortOpen\":false,\"ip\":\"2.0.5.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-15\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-15\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-15\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-15\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-15\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-16\",\"httpPortOpen\":false,\"ip\":\"59.5.8.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-16\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-16\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-16\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-16\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-16\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-17\",\"httpPortOpen\":false,\"ip\":\"48.7.1.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-17\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-17\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-17\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-17\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-17\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-18\",\"httpPortOpen\":false,\"ip\":\"84.9.0.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-18\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-18\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-18\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-18\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-18\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-19\",\"httpPortOpen\":false,\"ip\":\"7.0.9.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-19\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-19\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-19\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-19\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-19\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-20\",\"httpPortOpen\":false,\"ip\":\"63.9.5.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-20\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-20\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-20\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-20\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-20\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-21\",\"httpPortOpen\":false,\"ip\":\"62.0.2.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-21\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-21\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-21\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-21\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-21\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-22\",\"httpPortOpen\":false,\"ip\":\"31.9.4.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-22\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-22\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-22\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-22\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-22\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-23\",\"httpPortOpen\":false,\"ip\":\"27.4.7.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-23\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-23\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-23\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-23\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-23\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-24\",\"httpPortOpen\":false,\"ip\":\"75.2.3.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-24\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-24\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-24\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-24\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ad531635-b6ad-4e48-b872-91e85169edf8\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-24\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":6,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":3448926.172465602}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":196.0288,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":2003015.9495878194}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":159.5859,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":1935043.267212435}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":144.5636,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":1823162.074217034}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":172.1002,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":2028419.4817927086}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":69.3165,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":150.1433,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":1864845.2044959487}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"c\":\"clear\",\"ch\":\"connect home\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":12688.668191727318,\"lastPrice\":12650.118365778586,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":true,\"otlkMag\":6.723588880357609,\"otlkMagForecast\":66.42026065276455,\"cap\":317687388,\"spreadPerc\":0.2,\"shareTxForMovement\":53652,\"shareTxUntilMovement\":10638,\"totalShares\":107400000,\"maxShares\":21500000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":66082.09216827845,\"lastPrice\":65903.08944771346,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":6.904855875785445,\"otlkMagForecast\":31.89926240966104,\"cap\":639193901,\"spreadPerc\":0.5,\"shareTxForMovement\":54837,\"shareTxUntilMovement\":54760,\"totalShares\":92700000,\"maxShares\":18500000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":60037.83220582255,\"lastPrice\":60328.17955379649,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":6.259370198368696,\"otlkMagForecast\":60.15983365104308,\"cap\":293879964,\"spreadPerc\":0.6,\"shareTxForMovement\":61905,\"shareTxUntilMovement\":61905,\"totalShares\":115000000,\"maxShares\":23000000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":2277.4001365944555,\"lastPrice\":2267.635488366835,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":6.40954585738811,\"otlkMagForecast\":58.894550083352485,\"cap\":166834448,\"spreadPerc\":0.4,\"shareTxForMovement\":31892,\"shareTxUntilMovement\":19056,\"totalShares\":113600000,\"maxShares\":22700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":49832.90648629781,\"lastPrice\":49632.337138677176,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":5.97776166948,\"otlkMagForecast\":35.87512899084096,\"cap\":282018964,\"spreadPerc\":0.5,\"shareTxForMovement\":55184,\"shareTxUntilMovement\":9860,\"totalShares\":51600000,\"maxShares\":10300000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":8162.765168484299,\"lastPrice\":8217.92303698158,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":false,\"otlkMag\":17.09569989956042,\"otlkMagForecast\":29.004837595586473,\"cap\":794275877,\"spreadPerc\":0.8,\"shareTxForMovement\":66755,\"shareTxUntilMovement\":40700,\"totalShares\":32000000,\"maxShares\":6400000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":19132.195661681562,\"lastPrice\":19227.255282535727,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":7.533001560815068,\"otlkMagForecast\":41.59675533566982,\"cap\":633479282,\"spreadPerc\":0.2,\"shareTxForMovement\":60267,\"shareTxUntilMovement\":60267,\"totalShares\":71800000,\"maxShares\":14400000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":97422.19468527306,\"lastPrice\":96609.37726214789,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":true,\"otlkMag\":8.693046813352279,\"otlkMagForecast\":66.20865244014827,\"cap\":131744665,\"spreadPerc\":0.6,\"shareTxForMovement\":50393,\"shareTxUntilMovement\":31883,\"totalShares\":59800000,\"maxShares\":12000000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":7590.58239980206,\"lastPrice\":7546.0903914088985,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.89,\"b\":false,\"otlkMag\":5.958423881882885,\"otlkMagForecast\":44.22168301535291,\"cap\":199711558,\"spreadPerc\":0.2,\"shareTxForMovement\":90057,\"shareTxUntilMovement\":90057,\"totalShares\":49500000,\"maxShares\":9900000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":7927.908026029298,\"lastPrice\":7963.096740925022,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":8.144420174987598,\"otlkMagForecast\":62.92675074659259,\"cap\":237976734,\"spreadPerc\":0.3,\"shareTxForMovement\":51657,\"shareTxUntilMovement\":51657,\"totalShares\":58200000,\"maxShares\":11600000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":12401.29991710497,\"lastPrice\":12447.307057311724,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":7.053171530476857,\"otlkMagForecast\":60.994358677563085,\"cap\":200653276,\"spreadPerc\":0.5,\"shareTxForMovement\":60106,\"shareTxUntilMovement\":57820,\"totalShares\":63100000,\"maxShares\":12600000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":8085.048445022777,\"lastPrice\":8126.290790166275,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":5.99772757353146,\"otlkMagForecast\":45.77973755854841,\"cap\":306136697,\"spreadPerc\":0.3,\"shareTxForMovement\":38170,\"shareTxUntilMovement\":38170,\"totalShares\":77700000,\"maxShares\":15500000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":17152.6791947447,\"lastPrice\":17220.858601216118,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":7.159006946492279,\"otlkMagForecast\":41.413511784314835,\"cap\":177404025,\"spreadPerc\":0.4,\"shareTxForMovement\":40273,\"shareTxUntilMovement\":40273,\"totalShares\":43800000,\"maxShares\":8800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":16798.477937101037,\"lastPrice\":16863.023728128333,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":7.303636620067292,\"otlkMagForecast\":61.78515716296867,\"cap\":247139755,\"spreadPerc\":0.3,\"shareTxForMovement\":91166,\"shareTxUntilMovement\":10682,\"totalShares\":54100000,\"maxShares\":10800000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":14818.605341262482,\"lastPrice\":14762.859133105483,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":5.390416905149278,\"otlkMagForecast\":55.197743326522165,\"cap\":189403747,\"spreadPerc\":0.3,\"shareTxForMovement\":42366,\"shareTxUntilMovement\":42366,\"totalShares\":53000000,\"maxShares\":10600000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":18728.20811607288,\"lastPrice\":18817.538401969083,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":5.017669742431091,\"otlkMagForecast\":46.00734029362093,\"cap\":64613108,\"spreadPerc\":1,\"shareTxForMovement\":70641,\"shareTxUntilMovement\":70641,\"totalShares\":45300000,\"maxShares\":9100000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":2622.5672022536596,\"lastPrice\":2609.4292066559565,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":5.885961198528829,\"otlkMagForecast\":57.02823141783225,\"cap\":201262636,\"spreadPerc\":0.4,\"shareTxForMovement\":109879,\"shareTxUntilMovement\":103565,\"totalShares\":43700000,\"maxShares\":8700000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":58139.06690431117,\"lastPrice\":57893.606987179184,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":7.162646047328598,\"otlkMagForecast\":61.28386741593283,\"cap\":212367100,\"spreadPerc\":0.7,\"shareTxForMovement\":80910,\"shareTxUntilMovement\":48220,\"totalShares\":25500000,\"maxShares\":5100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":17211.04863015342,\"lastPrice\":17120.314282619674,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":6.448016020612244,\"otlkMagForecast\":54.36431499028721,\"cap\":220093958,\"spreadPerc\":1.1,\"shareTxForMovement\":64813,\"shareTxUntilMovement\":64813,\"totalShares\":24800000,\"maxShares\":5000000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":8844.461158963159,\"lastPrice\":8702.067902656645,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.47,\"b\":true,\"otlkMag\":6.928674040876077,\"otlkMagForecast\":59.3447357792928,\"cap\":23629118,\"spreadPerc\":1,\"shareTxForMovement\":50387,\"shareTxUntilMovement\":36460,\"totalShares\":65500000,\"maxShares\":13100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":3489.6456512880186,\"lastPrice\":3516.231416849671,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.15,\"b\":false,\"otlkMag\":5.967611456362606,\"otlkMagForecast\":44.15876194206787,\"cap\":86014580,\"spreadPerc\":1,\"shareTxForMovement\":45718,\"shareTxUntilMovement\":15336,\"totalShares\":62300000,\"maxShares\":12500000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4945.986471404048,\"lastPrice\":4964.00775056925,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":1.8969420890066169,\"otlkMagForecast\":54.17389767264726,\"cap\":21525182,\"spreadPerc\":0.8,\"shareTxForMovement\":119444,\"shareTxUntilMovement\":119444,\"totalShares\":28500000,\"maxShares\":5700000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":5023.241722368835,\"lastPrice\":4965.022753380509,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.77,\"b\":true,\"otlkMag\":7.390393826374908,\"otlkMagForecast\":60.99085879495852,\"cap\":88995387,\"spreadPerc\":1,\"shareTxForMovement\":36027,\"shareTxUntilMovement\":12970,\"totalShares\":40400000,\"maxShares\":8100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":11167.413208044612,\"lastPrice\":11292.44178586762,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.69,\"b\":true,\"otlkMag\":5.585151406749582,\"otlkMagForecast\":55.4257736666648,\"cap\":104399224,\"spreadPerc\":1.1,\"shareTxForMovement\":18351,\"shareTxUntilMovement\":18351,\"totalShares\":42100000,\"maxShares\":8400000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1398.1965198706628,\"lastPrice\":1389.177614033834,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":true,\"otlkMag\":8.691983724047441,\"otlkMagForecast\":63.524214274608276,\"cap\":83549704,\"spreadPerc\":0.9,\"shareTxForMovement\":72682,\"shareTxUntilMovement\":10818,\"totalShares\":36800000,\"maxShares\":7400000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":86.64267447545959,\"lastPrice\":85.45384138296384,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.1,\"b\":true,\"otlkMag\":6.126545599910745,\"otlkMagForecast\":60.02924383141513,\"cap\":21898904,\"spreadPerc\":0.6,\"shareTxForMovement\":30505,\"shareTxUntilMovement\":30505,\"totalShares\":34800000,\"maxShares\":7000000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1668.5286817460558,\"lastPrice\":1658.2026026637095,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.94,\"b\":true,\"otlkMag\":5.701354294861499,\"otlkMagForecast\":54.990046604958685,\"cap\":132321379,\"spreadPerc\":0.5,\"shareTxForMovement\":54530,\"shareTxUntilMovement\":54530,\"totalShares\":8600000,\"maxShares\":1700000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1334.8620049250376,\"lastPrice\":1328.0873470955787,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":5.255095499895023,\"otlkMagForecast\":45.70381164167368,\"cap\":25977561,\"spreadPerc\":0.6,\"shareTxForMovement\":145401,\"shareTxUntilMovement\":145401,\"totalShares\":38500000,\"maxShares\":7700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2835.968637568924,\"lastPrice\":2814.3412162390814,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.16,\"b\":false,\"otlkMag\":7.343554300973302,\"otlkMagForecast\":41.272463019829964,\"cap\":8355210,\"spreadPerc\":0.6,\"shareTxForMovement\":68527,\"shareTxUntilMovement\":21734,\"totalShares\":9200000,\"maxShares\":1800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":5019230.882825441,\"lastPrice\":4934884.454838399,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.58,\"b\":true,\"otlkMag\":21.1681687784066,\"otlkMagForecast\":97.98520543789701,\"cap\":12162958,\"spreadPerc\":0.9,\"shareTxForMovement\":22315,\"shareTxUntilMovement\":22315,\"totalShares\":32800000,\"maxShares\":6600000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1117.311489484561,\"lastPrice\":1106.6808255683843,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.45,\"b\":false,\"otlkMag\":6.837728885544305,\"otlkMagForecast\":47.30255168247965,\"cap\":13395634,\"spreadPerc\":1.3,\"shareTxForMovement\":52607,\"shareTxUntilMovement\":52607,\"totalShares\":70700000,\"maxShares\":14100000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":13224.162684760306,\"lastPrice\":13293.372115215896,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":7.105513499250249,\"otlkMagForecast\":55.394241753908936,\"cap\":56586340,\"spreadPerc\":0.5,\"shareTxForMovement\":112400,\"shareTxUntilMovement\":112400,\"totalShares\":17800000,\"maxShares\":3600000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":10880.973579385503,\"lastPrice\":10927.828058388763,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":9.707031752691973,\"otlkMagForecast\":60.097342615058,\"cap\":175773669,\"spreadPerc\":1,\"shareTxForMovement\":188153,\"shareTxUntilMovement\":120171,\"totalShares\":22100000,\"maxShares\":4400000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":852473,\"lastUpdate\":1642272308413,\"ticksUntilCycle\":68}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1642004086601","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}